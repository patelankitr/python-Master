{"name": "test_login_and_take_screenshot", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: ifm", "trace": "self = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000002359C2617F0>, frame_reference = 'ifm'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n>               frame_reference = self._driver.find_element(By.ID, frame_reference)\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002359C2616A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF66D37ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FF80317E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8047DFBCC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"ifm\"]\"}\nE         (Session info: chrome=131.0.6778.205); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66D41FB05+28789]\nE       \t(No symbol) [0x00007FF66D3886E0]\nE       \t(No symbol) [0x00007FF66D22592A]\nE       \t(No symbol) [0x00007FF66D27930E]\nE       \t(No symbol) [0x00007FF66D2795FC]\nE       \t(No symbol) [0x00007FF66D2C28A7]\nE       \t(No symbol) [0x00007FF66D29F47F]\nE       \t(No symbol) [0x00007FF66D2BF654]\nE       \t(No symbol) [0x00007FF66D29F1E3]\nE       \t(No symbol) [0x00007FF66D26A938]\nE       \t(No symbol) [0x00007FF66D26BAA1]\nE       \tGetHandleVerifier [0x00007FF66D75933D+3410093]\nE       \tGetHandleVerifier [0x00007FF66D76E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF66D762A73+3448803]\nE       \tGetHandleVerifier [0x00007FF66D4E7BBB+848171]\nE       \t(No symbol) [0x00007FF66D393C3F]\nE       \t(No symbol) [0x00007FF66D38F6E4]\nE       \t(No symbol) [0x00007FF66D38F87D]\nE       \t(No symbol) [0x00007FF66D37ED49]\nE       \tBaseThreadInitThunk [0x00007FF80317E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8047DFBCC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000002359C2617F0>, frame_reference = 'ifm'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n>                   frame_reference = self._driver.find_element(By.NAME, frame_reference)\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002359C2616A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF66D37ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FF80317E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8047DFBCC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"ifm\"]\"}\nE         (Session info: chrome=131.0.6778.205); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66D41FB05+28789]\nE       \t(No symbol) [0x00007FF66D3886E0]\nE       \t(No symbol) [0x00007FF66D22592A]\nE       \t(No symbol) [0x00007FF66D27930E]\nE       \t(No symbol) [0x00007FF66D2795FC]\nE       \t(No symbol) [0x00007FF66D2C28A7]\nE       \t(No symbol) [0x00007FF66D29F47F]\nE       \t(No symbol) [0x00007FF66D2BF654]\nE       \t(No symbol) [0x00007FF66D29F1E3]\nE       \t(No symbol) [0x00007FF66D26A938]\nE       \t(No symbol) [0x00007FF66D26BAA1]\nE       \tGetHandleVerifier [0x00007FF66D75933D+3410093]\nE       \tGetHandleVerifier [0x00007FF66D76E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF66D762A73+3448803]\nE       \tGetHandleVerifier [0x00007FF66D4E7BBB+848171]\nE       \t(No symbol) [0x00007FF66D393C3F]\nE       \t(No symbol) [0x00007FF66D38F6E4]\nE       \t(No symbol) [0x00007FF66D38F87D]\nE       \t(No symbol) [0x00007FF66D37ED49]\nE       \tBaseThreadInitThunk [0x00007FF80317E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8047DFBCC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nThe above exception was the direct cause of the following exception:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a0c90806542c706f0a8415e266e0bc7\")>, request = <FixtureRequest for <Function test_login_and_take_screenshot>>\n\n    def test_login_and_take_screenshot(setup, request):\n            driver = setup\n            take_screenshot = request.config.getoption(\"--take-screenshot\")  # Get the string (\"True\" or \"False\")\n            # Convert the string to a boolean\n            take_screenshot = take_screenshot.lower() == \"true\"  # Convert to True if \"True\" is passed\n            # Step 1: Handle the \"Agree and Close\" popup\n            try:\n                WebDriverWait(driver, 10).until(\n                    EC.presence_of_element_located((By.ID, 'didomi-notice-agree-button'))\n                )\n                agree_button = driver.find_element(By.ID, 'didomi-notice-agree-button')\n    \n                # Case 1: If take_screenshot is True, take a screenshot and compare\n                if take_screenshot:\n                    agree_button_path = take_element_screenshot(driver, agree_button, \"agree_button\")\n                    assert compare_element_images(\"agree_button.png\"), \"Agree button does not match the baseline!\"\n                # Case 2: If take_screenshot is False, just compare the screenshot without taking a new one\n                else:\n                    assert compare_element_images(\"agree_button.png\"), \"Agree button does not match the baseline!\"\n    \n                agree_button.click()\n            except Exception as e:\n                print(f\"Agree and close button not found: {e}\")\n    \n            # Step 2: Login\n            LoginTest(driver)\n    \n            # Step 3: Handle the login iframe popup\n>           driver.switch_to.frame(\"ifm\")\n\ntest\\test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000002359C2617F0>, frame_reference = 'ifm'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n                    frame_reference = self._driver.find_element(By.NAME, frame_reference)\n                except NoSuchElementException as exc:\n>                   raise NoSuchFrameException(frame_reference) from exc\nE                   selenium.common.exceptions.NoSuchFrameException: Message: ifm\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:93: NoSuchFrameException"}, "attachments": [{"name": "Baseline - agree_button.png--Expected Result", "source": "404f87d8-f19d-4989-95c2-b89816b9fcde-attachment.png", "type": "image/png"}, {"name": "Dynamic - agree_button.png--Actual Result", "source": "59a912f2-1dfe-49e3-a3b0-79e32677f702-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "7f782302-8c2c-4cc0-b6e7-f77351242f8b-attachment.txt", "type": "text/plain"}], "start": 1736252511426, "stop": 1736252512834, "uuid": "cf280e99-9b9f-416d-b3ab-c51b602ee9cb", "historyId": "2f444cd1ee38f5210af6756a9411fd7e", "testCaseId": "2f444cd1ee38f5210af6756a9411fd7e", "fullName": "test.test_login#test_login_and_take_screenshot", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DESKTOP-VPPJH6D"}, {"name": "thread", "value": "36660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_login"}]}